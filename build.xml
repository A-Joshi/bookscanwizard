<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="Book_Scan_Wizard" default="default" basedir=".">
    <description>Builds, tests, and runs the project Book Scan Wizard.</description>
    <import file="nbproject/build-impl.xml"/>

    <target name="all" depends = "default"/>

    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="Book_Scan_Wizard-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    <target name="genkey">
        <genkey alias="bsw" storepass="secret" validity="730" >
          <dname>
            <param name="CN" value="bookscanwizard.sourceforge.net"/>
            <param name="O"  value="Steve Devore"/>
            <param name="C"  value="US"/>
          </dname>
        </genkey>
    </target>

    <target name="package">
        <copy todir="dist" file="readme.rtf"/>
        <delete file="dist/readme.txt"/>
        <zip destfile="BookScanWizard_2.0beta2.zip">
            <fileset dir="dist" includes="*" excludes="javadoc"/>
            <fileset dir="dist" includes="lib/*"/>
        </zip>
    </target>

    <target name="jws_package">
        <mkdir dir="package/bin"/>
       <zip destfile="package/bin/BookScanWizard.jar" duplicate="preserve" >
            <zipfileset src="dist/BookScanWizard.jar" excludes="META-INF/INDEX.LIST"/>
            <zipgroupfileset dir="dist/lib" includes="*.jar" excludes="jai*.jar,clib*.jar,mlib*.jar"/>  
        </zip>
        <signjar jar="package/bin/BookScanWizard.jar" alias="bsw" storepass="secret"/>
        <copy todir="package/bin">
<!--            <fileset dir="dist" includes="*.jar"/> -->
            <fileset dir="bin"/>
        </copy>
        <copy todir="package">
            <fileset dir="." includes="*.txt,*.rtf" excludes="BUILD*"/>
        </copy>
        <mkdir dir="package/example"/>
        <copy todir="package/example/">
            <fileset dir="examples/basic"/>
        </copy>
        <zip destfile="BookScanWizard_2.0beta1.zip">
            <fileset dir="package"/>
        </zip>
    </target>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <pathelement location="ant-contrib.jar" />
      </classpath>
    </taskdef>

    <macrodef name="unsignjar">
        <attribute name="jar"/>

        <sequential>
            <!-- Remove any existing signatures from a JAR file. -->
            <tempfile prefix="usignjar-" destdir="${java.io.tmpdir}" property="temp.file"/>
            <echo message="Removing signatures from JAR: @{jar}"/>
            <mkdir dir="${temp.file}"/>

            <unjar src="@{jar}" dest="${temp.file}">
                <patternset>
                    <include name="**"/>
                    <exclude name="META-INF/*.SF"/>
                    <exclude name="META-INF/*.DSA"/>
                    <exclude name="META-INF/*.RSA"/>
                </patternset>
            </unjar>

            <delete file="@{jar}" failonerror="true"/>

            <!-- Touch it in case the file didn't have a manifest.
                 Otherwise the JAR task below will fail if the manifest 
                 file doesn't exist. -->
            <mkdir dir="${temp.file}/META-INF"/>
            <touch file="${temp.file}/META-INF/MANIFEST.MF"/>

            <jar destfile="@{jar}" 
                basedir="${temp.file}" 
                includes="**" 
                manifest="${temp.file}/META-INF/MANIFEST.MF"/>

            <delete dir="${temp.file}" failonerror="true"/>
        </sequential>
    </macrodef>

    <!-- signs the jai jars -->
    <target name="jaijars">
        <for param="file">
            <path>
                <fileset dir="Y:\wwwroot\webstart\release" includes="**/*.jar"/>
            </path>
            <sequential>
                <unsignjar jar="@{file}"/>
                <signjar
                    jar="@{file}"
                    alias="bsw"
                    storepass="secret"
                    force="true"
                    lazy="false"/>
            </sequential>
        </for>        
    </target>

    <!-- Allows us to use the IzPack Ant task -->
<taskdef name="IzPack" classpath="${basedir}/installer/standalone-compiler.jar"
         classname="com.izforge.izpack.ant.IzPackTask"/>

<target name="installers">
<!-- We call IzPack -->
<echo message="Makes the installer using IzPack"/>
<IzPack input="${basedir}/installer/install.xml"
        output="dist/IzPack-install.jar"
        installerType="standard"
        basedir="dist"
        IzPackDir="dist/"/>    
</target>
</project>
