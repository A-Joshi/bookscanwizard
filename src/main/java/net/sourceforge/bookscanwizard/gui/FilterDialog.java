/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.sourceforge.bookscanwizard.gui;

import java.util.Enumeration;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.JTextField;
import net.sourceforge.bookscanwizard.BSW;
import org.jdesktop.beansbinding.Converter;

/**
 *
 * @author Steve
 */
public class FilterDialog extends javax.swing.JDialog {
    private static final int RED = 0;
    private static final int GREEN = 1;
    private static final int BLUE = 2;
    private static final int ALL = -1;
    private static final int WHITE = 0;
    private static final int BLACK = 1;
    private static final int GAMMA = 2;
    private static final int SATURATION = 3;
                                    
    double[][] levels = new double[4][3];
    double[] display = new double[4];
    
    int color = -1;
    private PercentageConverter percentageConverter = new PercentageConverter();

    /**
     * Creates new form FilterDialog
     */
    public FilterDialog(java.awt.Frame parent) {
        super(parent, false);
        setAlwaysOnTop(true);
        initComponents();
        setInitialLevels();
        int x = parent.getWidth() - this.getWidth() - 180;
        int y = 30;
        setLocation(x, y);
    }

    private void setInitialLevels() {
        display[WHITE]= 100;
        display[BLACK]= 0;
        display[GAMMA]=50;
        display[SATURATION]=100;
        updateAllTo(RED);
        update();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroup1 = new javax.swing.ButtonGroup();
        whiteSlider = new javax.swing.JSlider();
        gammaSlider = new javax.swing.JSlider();
        whiteTF = new javax.swing.JTextField();
        blackTF = new javax.swing.JTextField();
        gammaTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        blackSlider = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        saturationSlider = new javax.swing.JSlider();
        saturationTF = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        redRadio = new javax.swing.JRadioButton();
        blueRadio = new javax.swing.JRadioButton();
        greenRadio = new javax.swing.JRadioButton();
        allRadio = new javax.swing.JRadioButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();

        whiteSlider.setMajorTickSpacing(127);
        whiteSlider.setMaximum(255);
        whiteSlider.setMinimum(1);
        whiteSlider.setMinorTickSpacing(32);
        whiteSlider.setPaintLabels(true);
        whiteSlider.setPaintTicks(true);
        whiteSlider.setToolTipText("");
        whiteSlider.setValue(255);
        whiteSlider.setName(""); // NOI18N
        updateKeys(whiteSlider, "50", "100", "0");
        whiteSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                whiteSliderStateChanged(evt);
            }
        });

        gammaSlider.setMajorTickSpacing(127);
        gammaSlider.setMaximum(255);
        gammaSlider.setMinorTickSpacing(32);
        gammaSlider.setPaintLabels(true);
        gammaSlider.setPaintTicks(true);
        gammaSlider.setValue(128);
        updateKeys(gammaSlider, "50", "100", "0");
        gammaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gammaSliderStateChanged(evt);
            }
        });

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, whiteSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), whiteTF, org.jdesktop.beansbinding.BeanProperty.create("text"), "");
        binding.setConverter(percentageConverter);
        bindingGroup.addBinding(binding);

        whiteTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteTFActionPerformed(evt);
            }
        });

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, blackSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), blackTF, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setConverter(percentageConverter);
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, gammaSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), gammaTF, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setConverter(percentageConverter);
        bindingGroup.addBinding(binding);

        gammaTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gammaTFActionPerformed(evt);
            }
        });

        jLabel1.setText("White Level");

        jLabel2.setText("Black Level");

        jLabel3.setText("Midpoint");

        blackSlider.setMajorTickSpacing(127);
        blackSlider.setMaximum(255);
        blackSlider.setMinorTickSpacing(32);
        blackSlider.setPaintLabels(true);
        blackSlider.setPaintTicks(true);
        blackSlider.setValue(0);
        updateKeys(blackSlider, "50", "100", "0");
        blackSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                blackSliderStateChanged(evt);
            }
        });

        jLabel4.setText("Saturation");

        saturationSlider.setMajorTickSpacing(255);
        saturationSlider.setMaximum(510);
        saturationSlider.setMinorTickSpacing(64);
        saturationSlider.setPaintLabels(true);
        saturationSlider.setPaintTicks(true);
        saturationSlider.setToolTipText("");
        saturationSlider.setValue(255);
        updateKeys(saturationSlider, "200", "100", "0");
        saturationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                saturationSliderStateChanged(evt);
            }
        });

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, saturationSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), saturationTF, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setConverter(percentageConverter);
        bindingGroup.addBinding(binding);

        saturationTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saturationTFActionPerformed(evt);
            }
        });

        buttonGroup1.add(redRadio);
        redRadio.setText("Red");
        redRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redRadioActionPerformed(evt);
            }
        });

        buttonGroup1.add(blueRadio);
        blueRadio.setText("Blue");
        blueRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueRadioActionPerformed(evt);
            }
        });

        buttonGroup1.add(greenRadio);
        greenRadio.setText("Green");
        greenRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenRadioActionPerformed(evt);
            }
        });

        buttonGroup1.add(allRadio);
        allRadio.setSelected(true);
        allRadio.setText("All");
        allRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRadioActionPerformed(evt);
            }
        });

        jButton1.setText("Save");
        jButton1.setActionCommand("save_filter");
        jButton1.addActionListener(BSW.instance().getMenuHandler());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator4)
            .addComponent(jSeparator3)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator2)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(allRadio)
                .addGap(5, 5, 5)
                .addComponent(redRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(greenRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blueRadio)
                .addContainerGap())
            .addComponent(jSeparator5)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saturationSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                            .addComponent(whiteSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(gammaSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(blackSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(blackTF)
                            .addComponent(whiteTF, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                            .addComponent(gammaTF)
                            .addComponent(saturationTF))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(redRadio)
                    .addComponent(greenRadio)
                    .addComponent(allRadio)
                    .addComponent(blueRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(whiteSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(whiteTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(blackSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(blackTF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gammaSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gammaTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(saturationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(saturationTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(10, 10, 10))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {blackTF, gammaTF, saturationTF, whiteTF});

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void whiteTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_whiteTFActionPerformed

    private void gammaTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gammaTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gammaTFActionPerformed

    private void saturationTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saturationTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saturationTFActionPerformed

    private void whiteSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_whiteSliderStateChanged
        if (blackSlider.getValue() >= whiteSlider.getValue()) {
            blackSlider.setValue(whiteSlider.getValue() - 1);
        }
        update();
    }//GEN-LAST:event_whiteSliderStateChanged

    private void blackSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_blackSliderStateChanged
        if (blackSlider.getValue() >= whiteSlider.getValue()) {
            whiteSlider.setValue(blackSlider.getValue() + 1);
        }
        update();
    }//GEN-LAST:event_blackSliderStateChanged

    private void gammaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gammaSliderStateChanged
        update();
    }//GEN-LAST:event_gammaSliderStateChanged

    private void saturationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_saturationSliderStateChanged
        update();
    }//GEN-LAST:event_saturationSliderStateChanged

    private void redRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redRadioActionPerformed
        setColor(RED);
    }//GEN-LAST:event_redRadioActionPerformed

    private void blueRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueRadioActionPerformed
        setColor(BLUE);
    }//GEN-LAST:event_blueRadioActionPerformed

    private void greenRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenRadioActionPerformed
        setColor(GREEN);
    }//GEN-LAST:event_greenRadioActionPerformed

    private void allRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allRadioActionPerformed
        setColor(ALL);
    }//GEN-LAST:event_allRadioActionPerformed

    private void update() {
        setLevels();
/*        for (int i=0; i < levels.length; i++) {
            System.out.println(Arrays.toString(levels[i]));
        }*/
        BSW.instance().getMainFrame().getViewerPanel().updateImage();        
    }
    public void setLevels() {
        display[WHITE] = toDouble(whiteTF);
        display[BLACK] = toDouble(blackTF);
        display[GAMMA] = toDouble(gammaTF);
        display[SATURATION] = toDouble(saturationTF);
        if (color < 0) {
            for (int i=RED; i <= BLUE; i++) {
                setLevelFromDisplay(i);
            }
        } else {
            setLevelFromDisplay(color);
        }
    }
    
    public void setLevelFromDisplay(int color) {
        for (int i=0; i < levels.length; i++) {
            levels[i][color] = display[i];
        }
    }
    
    public void setColor(int color) {
        if (color == ALL && this.color != ALL) {
            updateAllTo(this.color);
        }
        int displayColor = Math.max(0, color);
        for (int i=0;i < levels.length; i++) {
            display[i] = levels[i][displayColor];
        }
        this.color = color;
        whiteSlider.setValue((int) display[WHITE]);
        blackSlider.setValue((int) display[BLACK]);
        gammaSlider.setValue((int) display[GAMMA]);
        saturationSlider.setValue((int) display[SATURATION]);
    }

    public double[][] getLevels() {
        double[][] retVal = levels.clone();
        for (int i=0; i < retVal.length; i++) {
            retVal[i] = retVal[i].clone();
        }
        return retVal;
    }
    
    private double toDouble(JTextField tf) {
        try {
            return Double.parseDouble(tf.getText());
        } catch (Exception e) {
            return Double.NaN;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilterDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                FilterDialog dialog = new FilterDialog(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton allRadio;
    private javax.swing.JSlider blackSlider;
    private javax.swing.JTextField blackTF;
    private javax.swing.JRadioButton blueRadio;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JSlider gammaSlider;
    private javax.swing.JTextField gammaTF;
    private javax.swing.JRadioButton greenRadio;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JRadioButton redRadio;
    private javax.swing.JSlider saturationSlider;
    private javax.swing.JTextField saturationTF;
    private javax.swing.JSlider whiteSlider;
    private javax.swing.JTextField whiteTF;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void updateAllTo(int color) {
        for (int i=0; i < levels.length; i++) {
            System.arraycopy(levels[color], 0, levels[i], 0, levels[i].length);
        }
    }
    
    public String getConfig() {
        StringBuilder str = new StringBuilder();
        if (!isEquals(levels[WHITE], 100) || !isEquals(levels[BLACK], 0)) {
            str.append("Levels = ");
            if (isEquals(levels[WHITE]) && isEquals(levels[BLACK])) {
                str.append(String.format("%.1f, %.1f\n", levels[BLACK][RED], levels[WHITE][RED]));
            } else {
                str.append(String.format("%.1f, %.1f, %.1f", levels[BLACK]));
                str.append(String.format("%.1f, %.1f, %.1f\n", levels[WHITE]));
            }
        }
        if (!isEquals(levels[GAMMA], 50)) {
            str.append("Gamma = ");
            if (isEquals(levels[GAMMA])) {
                str.append(String.format("%.1f\n", 100 - levels[GAMMA][RED]));
            } else {
                str.append(String.format("%.1f, %.1f, %.1f", 100 - levels[GAMMA][RED], 100 - levels[GAMMA][GREEN], 100 - levels[GAMMA][BLUE] ));
            }
            
        }
        if (levels[SATURATION][RED] != 100) {
            str.append(String.format("Saturation = %.1f\n", levels[SATURATION][RED]));
        }
        setVisible(false);
        return str.toString();
    }
    
    @Override
    public void setVisible(boolean visible) {
        super.setVisible(visible);
        if (!visible) {
            dispose();
            BSW.instance().getMainFrame().removeFilterDialog();
            BSW.instance().getMainFrame().getViewerPanel().updateImage();        
        }
    }
    
    private boolean isEquals(double[] ar) {
        return isEquals(ar, ar[0]);
    }
    
    private boolean isEquals(double[] ar, double match) {
        for (int i=0; i < ar.length; i++) {
            if (Math.abs(match - ar[i]) >= .03) {
                return false;
            }
        }
        return true;
    }
    
    private class PercentageConverter extends Converter {   

        @Override
        public Object convertReverse(Object s) {
            return (int) (Double.parseDouble(s.toString()) * 255.0 / 100.0);
        }

        @Override
        public Object convertForward(Object t) {
            String text = String.format("%.1f", ((Number) t).doubleValue() * 100.0 / 255.0);
            return text.equals("50.2") ? "50.0" : text;
        }
    } 
    
    private void updateKeys(JSlider slider, String... labels) {
        Enumeration e = slider.getLabelTable().elements();
        try {
            for (String text : labels) {
                JLabel label = (JLabel) e.nextElement();
                label.setText(text);
            }
        } catch (java.util.NoSuchElementException ex) {
            // ignore
        }
    }

}
