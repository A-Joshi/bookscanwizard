/*
 *
 * Copyright (c) 2011 by Steve Devore
 *                       http://bookscanwizard.sourceforge.net
 *
 * This file is part of the Book Scan Wizard.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
package net.sourceforge.bookscanwizard.unwarp;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.Raster;
import java.awt.image.RenderedImage;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.media.jai.JAI;
import javax.media.jai.RenderedOp;
import javax.rmi.CORBA.Util;
import net.sourceforge.bookscanwizard.op.GaussianBlur;
import net.sourceforge.bookscanwizard.op.Scale;
import net.sourceforge.bookscanwizard.util.Utils;

/**
 * Determine the hsv values to match to find a laser line.
 */
public class FilterWizard extends javax.swing.JFrame {
    private RenderedImage img;
    private static float hue = .94f;
    private static float threshold = .11f;   //.13f;
    private static float saturation =.45f;
    private static float brightness =.69f;

    /** Creates new form FilterWizard */
    public FilterWizard() {
        initComponents();
    }
    
    public void setImage(RenderedImage img) {
        this.img = GaussianBlur.blur(img, 3, 2f);
        if (img instanceof RenderedOp) {
            ((RenderedOp) img).copyData();
        }
        setFilterImage(this.img);
        jSliderHue.setValue((int) (hue * 100));
        jSliderThreshold.setValue((int) (threshold * 100));
        jSliderSaturation.setValue((int) (saturation * 100));
        jSliderBrightness.setValue((int) (brightness * 100));
    }

    private void filter() {
        if (img == null) throw new NullPointerException();
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        if (showFiltered.isSelected()) {
            hue = jSliderHue.getValue() / 100F;
            threshold = jSliderThreshold.getValue() / 100F;
            saturation = jSliderSaturation.getValue() / 100F;
            brightness = jSliderBrightness.getValue() / 100F;
            setFilterImage(scan(img));
        } else {
            setFilterImage(img);
        }
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    private void setFilterImage(RenderedImage img) {
        Scale.qualityScale(img, .25f, .25f);
        displayJAI1.set(img);
    }

    /**
     * Returns true if the pixel seems to match the laser line.
     */
    private static boolean isHueMatches(int[] pixel) {
        float[] hsb = new float[3];
        Color.RGBtoHSB(pixel[0], pixel[1], pixel[2], hsb);
        return hueMatches(hsb[0]) && hsb[1] > saturation && hsb[2] > brightness;
    }

    /**
     * Returns true if the hue is the color is an approximate match.
     */
    private static boolean hueMatches(float color1) {
        float x = color1 - hue;
        return (x - Math.floor(x)) < threshold;
    }


    public final RenderedImage scan(RenderedImage image) {
        Raster data = image.getData();
        byte[] b = new byte[]{-1, 0};
        ColorModel model = new IndexColorModel(1, 1, b, b, b);
        WritableRaster detectedRaster = model.createCompatibleWritableRaster(data.getWidth(), data.getHeight());
        int startX = data.getMinX();
        int startY = data.getMinY();
        int endX = data.getWidth() - startX;
        int endY = data.getHeight() - startY;
        int[] pixel = new int[3];
        int[] bitPixel = {1};
        for (int y = startY; y < endY; y++) {
            for (int x = startX; x < endX; x++) {
                data.getPixel(x, y, pixel);
                if (isHueMatches(pixel)) {
                    detectedRaster.setPixel(x, y, bitPixel);
                }
            }
        }
        BufferedImage newImage = new BufferedImage(model, detectedRaster, false, null);
        return newImage;
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSliderHue = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jSliderThreshold = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        jSliderSaturation = new javax.swing.JSlider();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jSliderBrightness = new javax.swing.JSlider();
        jTextField4 = new javax.swing.JTextField();
        showFiltered = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayJAI1 = new com.sun.media.jai.widget.DisplayJAI();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setMaximumSize(new java.awt.Dimension(213, 2089));
        jPanel1.setRequestFocusEnabled(false);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Hue");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, -1, -1));

        jSliderHue.setValue(92);
        jSliderHue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jSliderHueMouseReleased(evt);
            }
        });
        jPanel1.add(jSliderHue, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, -1));

        jLabel2.setText("Hue Threshold");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, -1, -1));

        jSliderThreshold.setValue(10);
        jSliderThreshold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jSliderThresholdMouseReleased(evt);
            }
        });
        jPanel1.add(jSliderThreshold, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 220, -1, -1));

        jLabel3.setText("Minimum Saturation");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 300, -1, -1));

        jSliderSaturation.setValue(22);
        jSliderSaturation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jSliderSaturationMouseReleased(evt);
            }
        });
        jPanel1.add(jSliderSaturation, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 330, -1, -1));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderHue, org.jdesktop.beansbinding.ELProperty.create("${value}"), jTextField1, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 90, -1));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderThreshold, org.jdesktop.beansbinding.ELProperty.create("${value}"), jTextField2, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 90, -1));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderSaturation, org.jdesktop.beansbinding.ELProperty.create("${value}"), jTextField3, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jPanel1.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 370, 100, -1));

        jLabel4.setText("Minimum Brightness");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 410, -1, -1));

        jSliderBrightness.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jSliderBrightnessMouseReleased(evt);
            }
        });
        jPanel1.add(jSliderBrightness, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 440, -1, -1));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderBrightness, org.jdesktop.beansbinding.ELProperty.create("${value}"), jTextField4, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jPanel1.add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 470, 100, -1));

        showFiltered.setText("Show Filtered");
        showFiltered.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                showFilteredMouseReleased(evt);
            }
        });
        jPanel1.add(showFiltered, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 520, -1, -1));

        javax.swing.GroupLayout displayJAI1Layout = new javax.swing.GroupLayout(displayJAI1);
        displayJAI1.setLayout(displayJAI1Layout);
        displayJAI1Layout.setHorizontalGroup(
            displayJAI1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 899, Short.MAX_VALUE)
        );
        displayJAI1Layout.setVerticalGroup(
            displayJAI1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2061, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(displayJAI1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(26, 26, 26)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSliderHueMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderHueMouseReleased
        filter();
    }//GEN-LAST:event_jSliderHueMouseReleased

    private void jSliderThresholdMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderThresholdMouseReleased
        filter();
    }//GEN-LAST:event_jSliderThresholdMouseReleased

    private void jSliderSaturationMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderSaturationMouseReleased
        filter();
    }//GEN-LAST:event_jSliderSaturationMouseReleased

    private void jSliderBrightnessMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderBrightnessMouseReleased
        filter();
    }//GEN-LAST:event_jSliderBrightnessMouseReleased

    private void showFilteredMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showFilteredMouseReleased
        filter();
    }//GEN-LAST:event_showFilteredMouseReleased

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FilterWizard filterWizard = new FilterWizard();
                RenderedImage img;
                try {
                    img = ImageIO.read(new File("c:/test/new/r/tiff/img_0411.tif"));
                    filterWizard.setImage(img);
                } catch (IOException ex) {
                    Logger.getLogger(FilterWizard.class.getName()).log(Level.SEVERE, null, ex);
                }
                filterWizard.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.sun.media.jai.widget.DisplayJAI displayJAI1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSliderBrightness;
    private javax.swing.JSlider jSliderHue;
    private javax.swing.JSlider jSliderSaturation;
    private javax.swing.JSlider jSliderThreshold;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JCheckBox showFiltered;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

        static {
        JAI.getDefaultInstance().getTileCache().setMemoryCapacity(300000000);
    }

}
